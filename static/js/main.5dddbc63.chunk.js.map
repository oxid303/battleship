{"version":3,"sources":["app/utils/index.js","app/board/styles.js","app/board/index.js","app/button/styles.js","app/button/index.js","ships-generator/constants/index.js","ships-generator/fix-params/check-is-ships-fit.js","ships-generator/fix-params/check-ships-sizes.js","ships-generator/fix-params/get-ships-sizes.js","ships-generator/fix-params/index.js","ships-generator/create-grid/index.js","ships-generator/get-vectors/index.js","ships-generator/get-ship/index.js","ships-generator/index.js","app/index.js","serviceWorker.js","index.js"],"names":["num","styles","getBoardWrapper","x","point","margin","width","getXNames","display","gridTemplateColumns","getYNamesAndBoard","getName","height","textAlign","lineHeight","canvas","outline","Board","y","xNames","yNames","ships","ref","React","createRef","useEffect","canv","current","ctx","getContext","fillStyle","fillRect","wall","i","style","map","name","buttonWrapper","paddingTop","getButton","hover","keyboard","cursor","fontSize","backgroundColor","border","transition","Button","handleUpdate","useState","setHover","setKeyboard","onClick","onMouseEnter","onMouseLeave","onFocus","onBlur","X_NUM","SHIFTS","checkIsShipsFit","shipsSizes","maxLine","Math","max","minLine","min","linesNum","ceil","lines","Array","fill","line","shipsOnLine","shipSize","isWrong","checkShipsSizes","isArray","length","Number","isInteger","getShipsSizes","maxShip","result","push","fixParams","params","Object","sort","a","b","createGrid","grid","Set","v","h","add","getVectors","vectors","v1","floor","random","v2","v3","filter","getShip","restGrid","first","ship","next","has","pop","p","reverse","getShips","forEach","shift","delete","from","substr","arr","String","getYNames","App","setShips","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5dddbc63.chunk.js","sourcesContent":["export const getXNames = num => {\r\n  const str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  return Array.from(str.substr(0, num));\r\n};\r\n\r\nexport const getYNames = num => {\r\n  const arr = [];\r\n\r\n  for (let i = 1; i <= num; ++i) {\r\n    arr.push(String(i));\r\n  }\r\n  return arr;\r\n};","const styles = {\r\n  getBoardWrapper: (x, point) => ({\r\n    margin: 'auto',\r\n    width: (x + 2) * point,\r\n  }),\r\n  getXNames: (x, point) => ({\r\n    display: 'grid',\r\n    gridTemplateColumns: `repeat(${x + 1}, ${point}px)`,\r\n  }),\r\n  getYNamesAndBoard: point => ({\r\n    display: 'grid',\r\n    gridTemplateColumns: `${point}px auto`,\r\n  }),\r\n  getName: point => ({\r\n    width: point,\r\n    height: point,\r\n    textAlign: 'center',\r\n    lineHeight: 2,\r\n  }),\r\n  canvas: {\r\n    display: 'block',\r\n    outline: 0,\r\n  },\r\n};\r\n\r\nexport default styles;","import React from 'react';\r\nimport styles from './styles';\r\n\r\nconst Board = ({ x, y, xNames, yNames, ships }) => {\r\n\r\n  const ref = React.createRef();\r\n  const point = 32;\r\n\r\n  React.useEffect(() => {\r\n\r\n    const wall = 1;\r\n    const size = point - wall;\r\n    const doubleWall = wall * 2;\r\n    const width = x * point + wall;\r\n    const height = y * point + wall;\r\n\r\n    const canv = ref.current;\r\n    const ctx = canv.getContext('2d');\r\n    canv.width = width;\r\n    canv.height = height;\r\n\r\n    ctx.fillStyle = '#263238';\r\n    ctx.fillRect(0, 0, width, height);\r\n    ctx.fillStyle = '#fff';\r\n    ctx.fillRect(wall, wall, width - doubleWall, height - doubleWall);\r\n\r\n    ctx.fillStyle = '#b0bec5';\r\n    for (let i = 1; i < x; ++i) ctx.fillRect(i * point, wall, wall, height - doubleWall);\r\n    for (let i = 1; i < y; ++i) ctx.fillRect(wall, i * point, width - doubleWall, wall);\r\n\r\n    ctx.fillStyle = '#455a64';\r\n    for (const { x, y } of ships) {\r\n      ctx.fillRect(x * point + wall, y * point + wall, size, size);\r\n    }\r\n\r\n  }, [x, y, ships, ref]);\r\n\r\n  return (\r\n    <div style={styles.getBoardWrapper(x, point)}>\r\n      <div style={styles.getXNames(x, point)}>\r\n        <span></span>\r\n\r\n        {xNames.map(name =>\r\n          <div key={name} style={styles.getName(point)}>{name}</div>)}\r\n      </div>\r\n\r\n      <div style={styles.getYNamesAndBoard(point)}>\r\n        <div>\r\n          {yNames.map(name =>\r\n            <div key={name} style={styles.getName(point)}>{name}</div>)}\r\n        </div>\r\n\r\n        <canvas ref={ref} style={styles.canvas} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;","const styles = {\r\n  buttonWrapper: {\r\n    margin: 'auto',\r\n    paddingTop: 28,\r\n    width: 258,\r\n  },\r\n  getButton: (hover, keyboard) => ({\r\n    cursor: 'pointer',\r\n    fontSize: 18,\r\n    backgroundColor: hover ? '#b0bec5' : keyboard ? '#cfd8dc' : '#fff',\r\n    outline: 0,\r\n    border: '1px solid #263238',\r\n    width: 258,\r\n    height: 50,\r\n    transition: '0.1s',\r\n  }),\r\n};\r\n\r\nexport default styles;","import React from \"react\";\r\nimport styles from './styles';\r\n\r\nconst Button = ({ handleUpdate }) => {\r\n\r\n  let [hover, setHover] = React.useState(false);\r\n  let [keyboard, setKeyboard] = React.useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <div style={styles.buttonWrapper}>\r\n\r\n        <button\r\n          onClick={() => handleUpdate()}\r\n          onMouseEnter={() => setHover(true)}\r\n          onMouseLeave={() => setHover(false)}\r\n          onFocus={() => setKeyboard(true)}\r\n          onBlur={() => setKeyboard(false)}\r\n          style={styles.getButton(hover, keyboard)}\r\n        >\r\n          generate battleships\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Button;","export const XY_MIN = 1;\r\nexport const XY_MAX = 100;\r\nexport const XY_INIT = 10;\r\nexport const X_NUM = 1000;\r\nexport const Y_NUM = 1;\r\n\r\nexport const SHIFTS = [\r\n  -X_NUM - Y_NUM,\r\n  -Y_NUM,\r\n  X_NUM - Y_NUM,\r\n  -X_NUM,\r\n  0,\r\n  X_NUM,\r\n  -X_NUM + Y_NUM,\r\n  Y_NUM,\r\n  X_NUM + Y_NUM\r\n];","const checkIsShipsFit = (x, y, shipsSizes) => {\r\n\r\n  const maxLine = Math.max(x, y);\r\n  const minLine = Math.min(x, y);\r\n  const linesNum = Math.ceil(minLine / 3);\r\n\r\n  const lines = Array(linesNum).fill({\r\n    line: maxLine,\r\n    shipsOnLine: 0,\r\n  });\r\n\r\n  for (const shipSize of shipsSizes) {\r\n    let isWrong = true;\r\n\r\n    for (let i = 0; i < linesNum; ++i) {\r\n      const { line, shipsOnLine } = lines[i];\r\n\r\n      if (shipsOnLine * (shipSize - 1) + shipSize <= line) {\r\n\r\n        lines[i] = {\r\n          line: line - shipSize - 2,\r\n          shipsOnLine: shipsOnLine + 1,\r\n        };\r\n        isWrong = false;\r\n        break;\r\n      }\r\n    }\r\n    if (isWrong) return false;\r\n  }\r\n\r\n  // 99,9%\r\n  return true;\r\n};\r\n\r\nexport default checkIsShipsFit;","const checkShipsSizes = shipsSizes => {\r\n  if (!Array.isArray(shipsSizes) || !shipsSizes.length) return false;\r\n\r\n  for (const shipSize of shipsSizes) {\r\n    if (!Number.isInteger(shipSize) || shipSize < 1) return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport default checkShipsSizes;","import checkIsShipsFit from './check-is-ships-fit';\r\n\r\nconst getShipsSizes = (x, y) => {\r\n\r\n  let maxShip = 1;\r\n  let shipsSizes = [1];\r\n  let result = shipsSizes;\r\n\r\n  while (checkIsShipsFit(x, y, shipsSizes)) {\r\n    result = shipsSizes;\r\n    shipsSizes = [];\r\n\r\n    for (let shipSize = ++maxShip, num = 1; shipSize > 0; --shipSize, ++num) {\r\n      for (let i = 0; i < num; ++i) {\r\n        shipsSizes.push(shipSize);\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\nexport default getShipsSizes;","import { XY_MIN, XY_MAX, XY_INIT } from '../constants';\r\nimport checkIsShipsFit from './check-is-ships-fit';\r\nimport checkShipsSizes from './check-ships-sizes';\r\nimport getShipsSizes from './get-ships-sizes';\r\n\r\nconst fixParams = params => {\r\n  if (!(params instanceof Object)) params = {};\r\n  let { x, y, shipsSizes } = params;\r\n\r\n  if (!Number.isInteger(x) || x < XY_MIN || x > XY_MAX) x = XY_INIT;\r\n  if (!Number.isInteger(y) || y < XY_MIN || y > XY_MAX) y = XY_INIT;\r\n\r\n  if (!checkShipsSizes(shipsSizes)) {\r\n    return { x, y, shipsSizes: getShipsSizes(x, y) };\r\n  }\r\n\r\n  shipsSizes = [...shipsSizes].sort((a, b) => b - a);\r\n\r\n  if (!checkIsShipsFit(x, y, shipsSizes)) {\r\n    return { x, y, shipsSizes: getShipsSizes(x, y) };\r\n  }\r\n\r\n  return { x, y, shipsSizes };\r\n};\r\n\r\nexport default fixParams;","import { X_NUM } from '../constants';\r\n\r\nconst createGrid = (x, y) => {\r\n\r\n  const grid = new Set();\r\n\r\n  for (let v = 0; v < y; ++v) {\r\n    for (let h = 0; h < x; ++h) {\r\n\r\n      grid.add(h * X_NUM + v);\r\n    }\r\n  }\r\n\r\n  return grid;\r\n};\r\n\r\nexport default createGrid;","import { X_NUM, Y_NUM } from '../constants';\r\n\r\nconst getVectors = () => {\r\n\r\n  let vectors = [-X_NUM, Y_NUM, X_NUM, -Y_NUM];\r\n  const v1 = vectors[Math.floor(Math.random() * 4)];\r\n  const v2 = -v1;\r\n\r\n  vectors = vectors.filter(v => v !== v1 && v !== v2);\r\n  const v3 = vectors[Math.floor(Math.random() * 2)];\r\n  const v4 = -v3;\r\n\r\n  return [v4, v3, v2, v1];\r\n};\r\n\r\nexport default getVectors;","import getVectors from '../get-vectors';\r\n\r\nconst getShip = (shipSize, grid, restGrid) => {\r\n\r\n  if (!restGrid.length) return [];\r\n\r\n  const first = restGrid[Math.floor(Math.random() * restGrid.length)];\r\n  const vectors = getVectors();\r\n  let ship = [first];\r\n\r\n  while (ship.length < shipSize) {\r\n    const next = ship[ship.length - 1] + vectors[vectors.length - 1];\r\n\r\n    if (grid.has(next)) {\r\n      ship.push(next);\r\n\r\n    } else {\r\n      vectors.pop();\r\n\r\n      if (!vectors.length) {\r\n        return getShip(shipSize, grid, restGrid.filter(p => p !== first));\r\n      }\r\n\r\n      if (vectors.length === 2) {\r\n        ship = [first];\r\n      } else {\r\n        ship.reverse();\r\n      }\r\n    }\r\n  }\r\n  return ship;\r\n};\r\n\r\nexport default getShip;","import fixParams from './fix-params';\r\nimport createGrid from './create-grid';\r\nimport getShip from './get-ship';\r\nimport { X_NUM, SHIFTS } from './constants';\r\n\r\nconst getShips = params => {\r\n\r\n  const { x, y, shipsSizes } = fixParams(params);\r\n\r\n  const grid = createGrid(x, y);\r\n  const ships = [];\r\n\r\n  for (const shipSize of shipsSizes) {\r\n    const ship = getShip(shipSize, grid, [...grid]);\r\n\r\n    ship.forEach(point => {\r\n      ships.push({ x: ~~(point / X_NUM), y: point % X_NUM });\r\n      SHIFTS.forEach(shift => grid.delete(point + shift));\r\n    });\r\n  }\r\n\r\n  return ships;\r\n};\r\n\r\nexport default getShips;","import React from 'react';\r\nimport Board from './board';\r\nimport Button from './button';\r\nimport getShips from '../ships-generator';\r\nimport { getXNames, getYNames } from './utils';\r\n\r\nconst x = 10;\r\nconst y = 10;\r\nconst xNames = getXNames(x);\r\nconst yNames = getYNames(y);\r\n\r\nconst App = () => {\r\n\r\n  let [ships, setShips] = React.useState(null);\r\n\r\n  const handleUpdate = () => {\r\n    setShips(getShips({ x, y }));\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    handleUpdate();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ships && <div>\r\n        <Board x={x} y={y} ships={ships} xNames={xNames} yNames={yNames} />\r\n        <Button handleUpdate={handleUpdate} />\r\n      </div>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}