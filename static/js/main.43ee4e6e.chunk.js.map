{"version":3,"sources":["app/field/styles.js","app/field/index.js","app/board/styles.js","app/board/index.js","app/button/styles.js","app/button/index.js","ships-generator/constants/index.js","ships-generator/fix-params/check-is-ships-fit.js","ships-generator/fix-params/check-ships-sizes.js","ships-generator/fix-params/get-ships-sizes.js","ships-generator/fix-params/index.js","ships-generator/create-grid/index.js","ships-generator/get-vectors/index.js","ships-generator/get-ship/index.js","ships-generator/index.js","app/index.js","serviceWorker.js","index.js"],"names":["styles","canvas","display","outline","Field","x","y","size","ships","ref","React","createRef","useEffect","sizeIn","width","height","widthIn","wall","heightIn","canv","current","ctx","getContext","fillStyle","fillRect","i","style","getWrapper","margin","getXNames","gridTemplateColumns","getYNamesAndField","getName","textAlign","fontSize","lineHeight","Board","xNames","yNames","map","name","paddingTop","getButton","hover","focus","cursor","backgroundColor","border","transition","Button","handleUpdate","useState","setHover","setFocus","onClick","onMouseEnter","onMouseLeave","onFocus","onBlur","X_NUM","SHIFTS","checkIsShipsFit","shipsSizes","maxLine","Math","max","minLine","min","linesNum","ceil","lines","Array","fill","line","shipsOnLine","shipSize","isWrong","checkShipsSizes","isArray","length","Number","isInteger","getShipsSizes","maxShip","result","num","push","fixParams","params","Object","sort","a","b","createGrid","grid","Set","v","h","add","getVectors","v1","random","v2","getShip","vectors","first","ship","delete","next","has","pop","reverse","getShips","forEach","pos","shift","substring","_","String","App","setShips","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.43ee4e6e.chunk.js","sourcesContent":["const styles = {\r\n  canvas: {\r\n    display: 'block',\r\n    outline: 0,\r\n  },\r\n};\r\n\r\nexport default styles;","import React from 'react';\r\nimport styles from './styles';\r\n\r\nconst Field = ({ x, y, size, ships }) => {\r\n\r\n  const ref = React.createRef();\r\n\r\n  React.useEffect(() => {\r\n\r\n    const wall = 1;\r\n    const sizeIn = size - wall;\r\n    const doubleWall = wall * 2;\r\n    const width = x * size + wall;\r\n    const height = y * size + wall;\r\n    const widthIn = width - doubleWall;\r\n    const heightIn = height - doubleWall;\r\n\r\n    const canv = ref.current;\r\n    const ctx = canv.getContext('2d');\r\n    canv.width = width;\r\n    canv.height = height;\r\n\r\n    ctx.fillStyle = '#263238';\r\n    ctx.fillRect(0, 0, width, height);\r\n    ctx.fillStyle = '#fff';\r\n    ctx.fillRect(wall, wall, widthIn, heightIn);\r\n\r\n    ctx.fillStyle = '#b0bec5';\r\n    for (let i = 1; i < x; ++i) ctx.fillRect(i * size, wall, wall, heightIn);\r\n    for (let i = 1; i < y; ++i) ctx.fillRect(wall, i * size, widthIn, wall);\r\n\r\n    ctx.fillStyle = '#455a64';\r\n    for (const { x, y } of ships) {\r\n      ctx.fillRect(x * size + wall, y * size + wall, sizeIn, sizeIn);\r\n    }\r\n\r\n  }, [x, y, size, ships, ref]);\r\n\r\n  return (\r\n    <canvas ref={ref} style={styles.canvas} />\r\n  );\r\n};\r\n\r\nexport default Field;","const styles = {\r\n  getWrapper: (x, size) => ({\r\n    margin: 'auto',\r\n    width: (x + 2) * size,\r\n  }),\r\n  getXNames: (x, size) => ({\r\n    display: 'grid',\r\n    gridTemplateColumns: `repeat(${x + 1}, ${size}px)`,\r\n  }),\r\n  getYNamesAndField: size => ({\r\n    display: 'grid',\r\n    gridTemplateColumns: `${size}px auto`,\r\n  }),\r\n  getName: size => ({\r\n    width: size,\r\n    height: size,\r\n    textAlign: 'center',\r\n    fontSize: size / 2,\r\n    lineHeight: 2,\r\n  }),\r\n};\r\n\r\nexport default styles;","import React from 'react';\r\nimport Field from '../field';\r\nimport styles from './styles';\r\n\r\nconst Board = ({ x, y, size, ships, xNames, yNames }) => {\r\n\r\n  return (\r\n    <div style={styles.getWrapper(x, size)}>\r\n      <div style={styles.getXNames(x, size)}>\r\n        <span></span>\r\n\r\n        {xNames.map(name =>\r\n          <div key={name} style={styles.getName(size)}>{name}</div>)}\r\n      </div>\r\n\r\n      <div style={styles.getYNamesAndField(size)}>\r\n        <div>\r\n          {yNames.map(name =>\r\n            <div key={name} style={styles.getName(size)}>{name}</div>)}\r\n        </div>\r\n\r\n        <Field x={x} y={y} size={size} ships={ships} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;","const styles = {\r\n  getWrapper: (size, width) => ({\r\n    margin: 'auto',\r\n    paddingTop: size,\r\n    width,\r\n  }),\r\n  getButton: (size, width, hover, focus) => ({\r\n    width,\r\n    height: size * 1.5,\r\n    cursor: 'pointer',\r\n    fontSize: size / 2,\r\n    backgroundColor: hover ? '#b0bec5' : focus ? '#cfd8dc' : '#fff',\r\n    outline: 0,\r\n    border: '1px solid #263238',\r\n    transition: '0.1s',\r\n  }),\r\n};\r\n\r\nexport default styles;","import React from \"react\";\r\nimport styles from './styles';\r\n\r\nconst Button = ({ x, size, handleUpdate }) => {\r\n\r\n  let [hover, setHover] = React.useState(false);\r\n  let [focus, setFocus] = React.useState(false);\r\n\r\n  const width = x * size + 1;\r\n\r\n  return (\r\n    <div style={styles.getWrapper(size, width)}>\r\n\r\n      <button\r\n        onClick={() => handleUpdate()}\r\n        onMouseEnter={() => setHover(true)}\r\n        onMouseLeave={() => setHover(false)}\r\n        onFocus={() => setFocus(true)}\r\n        onBlur={() => setFocus(false)}\r\n        style={styles.getButton(size, width, hover, focus)}\r\n      >\r\n        GENERATE\r\n      </button>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Button;","export const XY_MIN = 1;\r\nexport const XY_MAX = 100;\r\nexport const XY_INIT = 10;\r\nexport const X_NUM = 1000;\r\nexport const Y_NUM = 1;\r\n\r\nexport const SHIFTS = [\r\n  -X_NUM - Y_NUM,   -Y_NUM,   X_NUM - Y_NUM,\r\n  -X_NUM,            0,       X_NUM,\r\n  -X_NUM + Y_NUM,    Y_NUM,   X_NUM + Y_NUM,\r\n];","const checkIsShipsFit = (x, y, shipsSizes) => {\r\n\r\n  const maxLine = Math.max(x, y);\r\n  const minLine = Math.min(x, y);\r\n  const linesNum = Math.ceil(minLine / 3);\r\n\r\n  const lines = Array(linesNum).fill({\r\n    line: maxLine,\r\n    shipsOnLine: 0,\r\n  });\r\n\r\n  for (const shipSize of shipsSizes) {\r\n    let isWrong = true;\r\n\r\n    for (let i = 0; i < linesNum; ++i) {\r\n      const { line, shipsOnLine } = lines[i];\r\n\r\n      if (shipsOnLine * (shipSize - 1) + shipSize <= line) {\r\n\r\n        lines[i] = {\r\n          line: line - shipSize - 2,\r\n          shipsOnLine: shipsOnLine + 1,\r\n        };\r\n        isWrong = false;\r\n        break;\r\n      }\r\n    }\r\n    if (isWrong) return false;\r\n  }\r\n\r\n  // 99,9%\r\n  return true;\r\n};\r\n\r\nexport default checkIsShipsFit;","const checkShipsSizes = shipsSizes => {\r\n  if (!Array.isArray(shipsSizes) || !shipsSizes.length) return false;\r\n\r\n  for (const shipSize of shipsSizes) {\r\n    if (!Number.isInteger(shipSize) || shipSize < 1) return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport default checkShipsSizes;","import checkIsShipsFit from './check-is-ships-fit';\r\n\r\nconst getShipsSizes = (x, y) => {\r\n\r\n  let maxShip = 1;\r\n  let shipsSizes = [maxShip];\r\n  let result = shipsSizes;\r\n\r\n  while (checkIsShipsFit(x, y, shipsSizes)) {\r\n    result = shipsSizes;\r\n    shipsSizes = [];\r\n\r\n    for (let shipSize = ++maxShip, num = 1; shipSize > 0; --shipSize, ++num) {\r\n      for (let i = 0; i < num; ++i) {\r\n        shipsSizes.push(shipSize);\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\nexport default getShipsSizes;","import { XY_MIN, XY_MAX, XY_INIT } from '../constants';\r\nimport checkIsShipsFit from './check-is-ships-fit';\r\nimport checkShipsSizes from './check-ships-sizes';\r\nimport getShipsSizes from './get-ships-sizes';\r\n\r\nconst fixParams = params => {\r\n  if (!(params instanceof Object)) params = {};\r\n  let { x, y, shipsSizes } = params;\r\n\r\n  if (!Number.isInteger(x) || x < XY_MIN || x > XY_MAX) x = XY_INIT;\r\n  if (!Number.isInteger(y) || y < XY_MIN || y > XY_MAX) y = XY_INIT;\r\n\r\n  if (!checkShipsSizes(shipsSizes)) {\r\n    return { x, y, shipsSizes: getShipsSizes(x, y) };\r\n  }\r\n\r\n  shipsSizes = [...shipsSizes].sort((a, b) => b > a);\r\n\r\n  if (!checkIsShipsFit(x, y, shipsSizes)) {\r\n    return { x, y, shipsSizes: getShipsSizes(x, y) };\r\n  }\r\n\r\n  return { x, y, shipsSizes };\r\n};\r\n\r\nexport default fixParams;","import { X_NUM } from '../constants';\r\n\r\nconst createGrid = (x, y) => {\r\n\r\n  const grid = new Set();\r\n\r\n  for (let v = 0; v < y; ++v) {\r\n    for (let h = 0; h < x; ++h) {\r\n\r\n      grid.add(h * X_NUM + v);\r\n    }\r\n  }\r\n\r\n  return grid;\r\n};\r\n\r\nexport default createGrid;","import { X_NUM, Y_NUM } from '../constants';\r\n\r\nconst getVectors = () => {\r\n  let v1 = Math.random() < 0.5 ? X_NUM : Y_NUM;\r\n  let v2 = v1 === X_NUM ? Y_NUM : X_NUM;\r\n\r\n  v1 = Math.random() < 0.5 ? v1 : -v1;\r\n  v2 = Math.random() < 0.5 ? v2 : -v2;\r\n\r\n  return [v1, -v1, v2, -v2];\r\n};\r\n\r\nexport default getVectors;","import getVectors from '../get-vectors';\r\n\r\nconst getShip = (shipSize, grid) => {\r\n\r\n  if (!grid.size) return [];\r\n\r\n  const vectors = getVectors();\r\n  const first = [...grid][~~(Math.random() * grid.size)];\r\n  let ship = [first];\r\n  grid.delete(first);\r\n\r\n  while (ship.length < shipSize) {\r\n    const next = ship[ship.length - 1] + vectors[vectors.length - 1];\r\n\r\n    if (grid.has(next)) {\r\n      ship.push(next);\r\n\r\n    } else {\r\n      vectors.pop();\r\n      if (!vectors.length) return getShip(shipSize, grid);\r\n\r\n      if (vectors.length === 2) ship = [first];\r\n      else ship.reverse();\r\n    }\r\n  }\r\n  return ship;\r\n};\r\n\r\nexport default getShip;","import fixParams from './fix-params';\r\nimport createGrid from './create-grid';\r\nimport getShip from './get-ship';\r\nimport { X_NUM, SHIFTS } from './constants';\r\n\r\nconst getShips = params => {\r\n\r\n  const { x, y, shipsSizes } = fixParams(params);\r\n\r\n  const grid = createGrid(x, y);\r\n  const ships = [];\r\n\r\n  for (const shipSize of shipsSizes) {\r\n    const ship = getShip(shipSize, new Set(grid));\r\n\r\n    ship.forEach(pos => {\r\n      ships.push({ x: ~~(pos / X_NUM), y: pos % X_NUM });\r\n      SHIFTS.forEach(shift => grid.delete(pos + shift));\r\n    });\r\n  }\r\n\r\n  return ships;\r\n};\r\n\r\nexport default getShips;","import React from 'react';\r\nimport Board from './board';\r\nimport Button from './button';\r\nimport getShips from '../ships-generator';\r\n\r\nconst x = 10;\r\nconst y = 10;\r\nconst size = 32;\r\nconst xNames = [...'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.substring(0, x)];\r\nconst yNames = Array(y).fill().map((_, i) => String(i + 1));\r\n\r\nconst App = () => {\r\n\r\n  let [ships, setShips] = React.useState(null);\r\n\r\n  const handleUpdate = () => {\r\n    setShips(getShips({ x, y }));\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    handleUpdate();\r\n  }, []);\r\n\r\n  return (\r\n    ships && <>\r\n      <Board x={x} y={y} size={size} ships={ships} xNames={xNames} yNames={yNames} />\r\n      <Button x={x} size={size} handleUpdate={handleUpdate} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}