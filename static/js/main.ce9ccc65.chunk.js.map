{"version":3,"sources":["ships-generator/utils/index.js","styles/index.js","app/board/index.js","ships-generator/constants/index.js","ships-generator/fix-params/check-is-ships-fit.js","ships-generator/fix-params/check-ships-sizes.js","ships-generator/fix-params/get-ships-sizes.js","ships-generator/fix-params/index.js","ships-generator/create-grid/index.js","ships-generator/get-ship/index.js","ships-generator/index.js","app/index.js","serviceWorker.js","index.js"],"names":["num","styles","getBoard","x","point","margin","width","getXNames","display","gridTemplateColumns","getVerticalGrid","getName","height","textAlign","lineHeight","canvas","outline","buttonWrapper","paddingTop","button","cursor","fontSize","backgroundColor","border","Board","y","xNames","yNames","ships","ref","React","createRef","useEffect","full","canv","current","ctx","getContext","fillStyle","fillRect","size","i","style","map","name","X_NUM","SHIFTS","checkIsShipsFit","shipsSizes","maxLine","Math","max","minLine","min","linesNum","ceil","lines","Array","fill","line","shipsOnLine","shipSize","isWrong","l","checkShipsSizes","isArray","length","Number","isInteger","getShipsSizes","maxShip","result","push","fixParams","params","Object","sort","a","b","createGrid","grid","Set","v","h","add","getShip","restGrid","first","floor","random","vectors","v1","v2","v3","filter","getVectors","ship","next","has","pop","p","reverse","getShips","forEach","shift","delete","arr","transformNumToPos","from","substr","String","getYNames","App","useState","setShips","handleUpdate","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ce9ccc65.chunk.js","sourcesContent":["import { X_NUM, Y_NUM } from '../constants';\r\n\r\nexport const getXNames = num => {\r\n  let str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  return Array.from(str.substr(0, num));\r\n};\r\n\r\nexport const getYNames = num => {\r\n  const arr = [];\r\n\r\n  for (let i = 1; i <= num; ++i) {\r\n    arr.push(String(i));\r\n  }\r\n  return arr;\r\n};\r\n\r\nexport const getVectors = () => {\r\n\r\n  let vectors = [-X_NUM, Y_NUM, X_NUM, -Y_NUM];\r\n  const v1 = vectors[Math.floor(Math.random() * 4)];\r\n  const v2 = -v1;\r\n\r\n  vectors = vectors.filter(v => v !== v1 && v !== v2);\r\n  const v3 = vectors[Math.floor(Math.random() * 2)];\r\n  const v4 = -v3;\r\n\r\n  return [v4, v3, v2, v1];\r\n};\r\n\r\nexport const transformNumToPos = arr => {\r\n  const result = [];\r\n\r\n  for (const point of arr) {\r\n    result.push({\r\n      x: ~~(point / X_NUM),\r\n      y: point % X_NUM,\r\n    });\r\n  }\r\n\r\n  return result;\r\n};","const styles = {\r\n  getBoard: (x, point) => ({\r\n    margin: 'auto',\r\n    width: (x + 2) * point,\r\n  }),\r\n  getXNames: (x, point) => ({\r\n    display: 'grid',\r\n    gridTemplateColumns: `repeat(${x + 1}, ${point}px)`,\r\n  }),\r\n  getVerticalGrid: point => ({\r\n    display: 'grid',\r\n    gridTemplateColumns: `${point}px auto`,\r\n  }),\r\n  getName: point => ({\r\n    width: point,\r\n    height: point,\r\n    textAlign: 'center',\r\n    lineHeight: 2,\r\n  }),\r\n  canvas: {\r\n    display: 'block',\r\n    outline: 0,\r\n  },\r\n  buttonWrapper: {\r\n    margin: 'auto',\r\n    paddingTop: 28,\r\n    width: 258,\r\n  },\r\n  button: {\r\n    cursor: 'pointer',\r\n    fontSize: 18,\r\n    backgroundColor: '#fff',\r\n    outline: 0,\r\n    border: '1px solid #263238',\r\n    width: 258,\r\n    height: 50,\r\n  },\r\n};\r\n\r\nexport default styles;","import React from 'react';\r\nimport styles from '../../styles';\r\n\r\nconst Board = ({ x, y, xNames, yNames, ships }) => {\r\n\r\n  const ref = React.createRef();\r\n  const point = 30;\r\n  const size = 2;\r\n  const full = point + size;\r\n\r\n  React.useEffect(() => {\r\n\r\n    const full = point + size;\r\n    const doubleSize = size * 2;\r\n    const width = x * full + size;\r\n    const height = y * full + size;\r\n\r\n    const canv = ref.current;\r\n    const ctx = canv.getContext('2d');\r\n    canv.width = width;\r\n    canv.height = height;\r\n\r\n    ctx.fillStyle = '#263238';\r\n    ctx.fillRect(0, 0, width, height);\r\n    ctx.fillStyle = '#fff';\r\n    ctx.fillRect(size, size, width - doubleSize, height - doubleSize);\r\n\r\n    ctx.fillStyle = '#b0bec5';\r\n    for (let i = 1; i < x; ++i) ctx.fillRect(i * full, size, size, height - doubleSize);\r\n    for (let i = 1; i < y; ++i) ctx.fillRect(size, i * full, width - doubleSize, size);\r\n\r\n    ctx.fillStyle = '#455a64';\r\n    for (const { x, y } of ships) {\r\n      ctx.fillRect(x * full + size, y * full + size, point, point);\r\n    }\r\n\r\n  }, [x, y, ships, ref]);\r\n\r\n  return (\r\n    <div style={styles.getBoard(x, full)}>\r\n      <div style={styles.getXNames(x, full)}>\r\n        <span></span>\r\n\r\n        {xNames.map(name =>\r\n          <div key={name} style={styles.getName(full)}>{name}</div>)}\r\n      </div>\r\n\r\n      <div style={styles.getVerticalGrid(full)}>\r\n        <div>\r\n          {yNames.map(name =>\r\n            <div key={name} style={styles.getName(full)}>{name}</div>)}\r\n        </div>\r\n\r\n        <canvas ref={ref} style={styles.canvas} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;","export const XY_MIN = 1;\r\nexport const XY_MAX = 100;\r\nexport const XY_INIT = 10;\r\nexport const X_NUM = 1000;\r\nexport const Y_NUM = 1;\r\n\r\nexport const SHIFTS = [\r\n  -X_NUM - Y_NUM,\r\n  -Y_NUM,\r\n  X_NUM - Y_NUM,\r\n  -X_NUM,\r\n  0,\r\n  X_NUM,\r\n  -X_NUM + Y_NUM,\r\n  Y_NUM,\r\n  X_NUM + Y_NUM\r\n];","const checkIsShipsFit = (x, y, shipsSizes) => {\r\n\r\n  const maxLine = Math.max(x, y);\r\n  const minLine = Math.min(x, y);\r\n  const linesNum = Math.ceil(minLine / 3);\r\n\r\n  const lines = Array(linesNum).fill({\r\n    line: maxLine,\r\n    shipsOnLine: 0,\r\n  });\r\n\r\n  for (const shipSize of shipsSizes) {\r\n    let isWrong = true;\r\n\r\n    for (let l = 0; l < linesNum; ++l) {\r\n      const { line, shipsOnLine } = lines[l];\r\n\r\n      if (shipsOnLine * (shipSize - 1) + shipSize <= line) {\r\n\r\n        lines[l] = {\r\n          line: line - shipSize - 2,\r\n          shipsOnLine: shipsOnLine + 1,\r\n        };\r\n        isWrong = false;\r\n        break;\r\n      }\r\n    }\r\n    if (isWrong) return false;\r\n  }\r\n\r\n  // 99,9%\r\n  return true;\r\n};\r\n\r\nexport default checkIsShipsFit;","const checkShipsSizes = shipsSizes => {\r\n  if (!Array.isArray(shipsSizes) || !shipsSizes.length) return false;\r\n\r\n  for (const shipSize of shipsSizes) {\r\n    if (!Number.isInteger(shipSize) || shipSize < 1) return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport default checkShipsSizes;","import checkIsShipsFit from './check-is-ships-fit';\r\n\r\nconst getShipsSizes = (x, y) => {\r\n\r\n  let maxShip = 1;\r\n  let shipsSizes = [1];\r\n  let result = shipsSizes;\r\n\r\n  while (checkIsShipsFit(x, y, shipsSizes)) {\r\n    result = shipsSizes;\r\n    shipsSizes = [];\r\n\r\n    for (let shipSize = ++maxShip, num = 1; shipSize > 0; --shipSize, ++num) {\r\n      for (let i = 0; i < num; ++i) {\r\n        shipsSizes.push(shipSize);\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\nexport default getShipsSizes;","import { XY_MIN, XY_MAX, XY_INIT } from '../constants';\r\nimport checkIsShipsFit from './check-is-ships-fit';\r\nimport checkShipsSizes from './check-ships-sizes';\r\nimport getShipsSizes from './get-ships-sizes';\r\n\r\nconst fixParams = params => {\r\n  if (!(params instanceof Object)) params = {};\r\n  let { x, y, shipsSizes } = params;\r\n\r\n  if (!Number.isInteger(x) || x < XY_MIN || x > XY_MAX) x = XY_INIT;\r\n  if (!Number.isInteger(y) || y < XY_MIN || y > XY_MAX) y = XY_INIT;\r\n\r\n  if (!checkShipsSizes(shipsSizes)) {\r\n    return { x, y, shipsSizes: getShipsSizes(x, y) };\r\n  }\r\n\r\n  shipsSizes = [...shipsSizes].sort((a, b) => b - a);\r\n\r\n  if (!checkIsShipsFit(x, y, shipsSizes)) {\r\n    return { x, y, shipsSizes: getShipsSizes(x, y) };\r\n  }\r\n\r\n  return { x, y, shipsSizes };\r\n};\r\n\r\nexport default fixParams;","import { X_NUM } from '../constants';\r\n\r\nconst createGrid = (x, y) => {\r\n\r\n  const grid = new Set();\r\n\r\n  for (let v = 0; v < y; ++v) {\r\n    for (let h = 0; h < x; ++h) {\r\n\r\n      grid.add(h * X_NUM + v);\r\n    }\r\n  }\r\n\r\n  return grid;\r\n};\r\n\r\nexport default createGrid;","import { getVectors } from '../utils';\r\n\r\nconst getShip = (shipSize, grid, restGrid) => {\r\n\r\n  if (!restGrid.length) return [];\r\n\r\n  const first = restGrid[Math.floor(Math.random() * restGrid.length)];\r\n  const vectors = getVectors();\r\n  let ship = [first];\r\n\r\n  while (ship.length < shipSize) {\r\n    const next = ship[ship.length - 1] + vectors[vectors.length - 1];\r\n\r\n    if (grid.has(next)) {\r\n      ship.push(next);\r\n\r\n    } else {\r\n      vectors.pop();\r\n\r\n      if (!vectors.length) {\r\n        return getShip(shipSize, grid, restGrid.filter(p => p !== first));\r\n      }\r\n\r\n      if (vectors.length === 2) {\r\n        ship = [first];\r\n      } else {\r\n        ship.reverse();\r\n      }\r\n    }\r\n  }\r\n  return ship;\r\n};\r\n\r\nexport default getShip;","import fixParams from './fix-params';\r\nimport createGrid from './create-grid';\r\nimport getShip from './get-ship';\r\nimport { SHIFTS } from './constants';\r\nimport { transformNumToPos } from './utils';\r\n\r\nconst getShips = params => {\r\n\r\n  const { x, y, shipsSizes } = fixParams(params);\r\n\r\n  const grid = createGrid(x, y);\r\n  const ships = [];\r\n\r\n  for (const shipSize of shipsSizes) {\r\n\r\n    const ship = getShip(shipSize, grid, [...grid]);\r\n\r\n    ship.forEach(point => {\r\n      ships.push(point);\r\n      SHIFTS.forEach(shift => grid.delete(point + shift));\r\n    });\r\n  }\r\n\r\n  return transformNumToPos(ships);\r\n};\r\n\r\nexport default getShips;","import React from 'react';\r\nimport Board from './board';\r\nimport getShips from '../ships-generator';\r\nimport { getXNames, getYNames } from '../ships-generator/utils';\r\nimport styles from '../styles';\r\n\r\nconst x = 10;\r\nconst y = 10;\r\nconst xNames = getXNames(x);\r\nconst yNames = getYNames(y);\r\n\r\nconst App = () => {\r\n\r\n  let [ships, setShips] = React.useState(null);\r\n\r\n  const handleUpdate = () => {\r\n    setShips(getShips({ x, y }));\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    handleUpdate();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ships && <div>\r\n        <Board x={x} y={y} ships={ships} xNames={xNames} yNames={yNames} />\r\n\r\n        <div style={styles.buttonWrapper}>\r\n          <button style={styles.button} onClick={handleUpdate}>\r\n            generate battleships\r\n          </button>\r\n        </div>\r\n      </div>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}